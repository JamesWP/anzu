<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1782" onload="init(evt)" viewBox="0 0 1200 1782" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1782.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1765" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1765" > </text>
<g id="frames">
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (7,600,000 samples, 0.42%)</title><rect x="989.9" y="1541" width="4.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="992.89" y="1551.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (500,000 samples, 0.03%)</title><rect x="1050.5" y="1493" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1053.54" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (300,000 samples, 0.02%)</title><rect x="694.1" y="1557" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="697.09" y="1567.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1189" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.41" y="1199.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="917" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.85" y="927.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1493" width="6.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1503.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="901" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.87" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (32,600,000 samples, 1.80%)</title><rect x="734.9" y="1573" width="21.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="737.94" y="1583.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="949" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.87" y="959.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.4" y="629" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.41" y="639.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_while_stmt (200,000 samples, 0.01%)</title><rect x="16.1" y="1109" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="19.12" y="1119.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (2,800,000 samples, 0.15%)</title><rect x="906.1" y="1557" width="1.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="909.12" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (300,000 samples, 0.02%)</title><rect x="878.9" y="1541" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="881.89" y="1551.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (500,000 samples, 0.03%)</title><rect x="943.0" y="1525" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="945.99" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (800,000 samples, 0.04%)</title><rect x="12.3" y="725" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.35" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (300,000 samples, 0.02%)</title><rect x="935.8" y="1557" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="938.83" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (400,000 samples, 0.02%)</title><rect x="696.0" y="1557" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="699.05" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1029" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.17" y="1039.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1429" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.78" y="1439.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="890.4" y="1493" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="893.42" y="1503.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="15.7" y="869" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.67" y="879.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1621" width="6.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1631.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.2" y="453" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.23" y="463.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (300,000 samples, 0.02%)</title><rect x="14.9" y="677" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="17.89" y="687.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.9" y="677" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.87" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="12.3" y="709" width="0.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.35" y="719.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.9" y="1413" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1192.87" y="1423.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.9" y="517" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.89" y="527.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="13.3" y="405" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.32" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (31,800,000 samples, 1.76%)</title><rect x="827.3" y="1557" width="20.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="830.30" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (400,000 samples, 0.02%)</title><rect x="880.4" y="1573" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="883.39" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (10,600,000 samples, 0.59%)</title><rect x="683.0" y="1589" width="6.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="686.02" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="309" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.41" y="319.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="565" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.15" y="575.5" ></text>
</g>
<g >
<title>anzu::compile (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1637" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="13.78" y="1647.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1205" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.17" y="1215.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,100,000 samples, 0.06%)</title><rect x="923.4" y="1509" width="0.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="926.45" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::compile_function (1,400,000 samples, 0.08%)</title><rect x="14.9" y="949" width="0.9" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="17.89" y="959.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="453" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="18.15" y="463.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="1045" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="13.85" y="1055.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.7" y="469" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.67" y="479.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (900,000 samples, 0.05%)</title><rect x="11.8" y="789" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.76" y="799.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1669" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.41" y="1679.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.9" y="1429" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.87" y="1439.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="1189.8" y="1621" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.80" y="1631.5" ></text>
</g>
<g >
<title>anzu::compile (200,000 samples, 0.01%)</title><rect x="10.3" y="1669" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="13.26" y="1679.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1237" width="5.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.63" y="1247.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.3" y="309" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="18.28" y="319.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.4" y="1285" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.41" y="1295.5" ></text>
</g>
<g >
<title>anzu::vm_stack::at (68,900,000 samples, 3.80%)</title><rect x="413.0" y="1589" width="44.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="415.95" y="1599.5" >anzu..</text>
</g>
<g >
<title>anzu::vm_stack::pop_and_save (200,000 samples, 0.01%)</title><rect x="1165.4" y="1605" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1168.38" y="1615.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_declaration_stmt (200,000 samples, 0.01%)</title><rect x="15.9" y="1109" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="18.86" y="1119.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::back (194,700,000 samples, 10.75%)</title><rect x="268.9" y="1573" width="126.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="271.86" y="1583.5" >std::vector&lt;anz..</text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.5" y="309" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="18.54" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (9,700,000 samples, 0.54%)</title><rect x="728.6" y="1573" width="6.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="731.62" y="1583.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (1,100,000 samples, 0.06%)</title><rect x="1150.5" y="1477" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1153.46" y="1487.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="12.7" y="597" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.67" y="607.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="229" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="16.84" y="239.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (700,000 samples, 0.04%)</title><rect x="451.8" y="1477" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="454.84" y="1487.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.7" y="1029" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.69" y="1039.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (2,600,000 samples, 0.14%)</title><rect x="1107.6" y="1477" width="1.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1110.60" y="1487.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="741" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.87" y="751.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.9" y="1445" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1192.87" y="1455.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.5" y="341" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.48" y="351.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.5" y="293" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="18.54" y="303.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::equal_to&gt; (1,100,000 samples, 0.06%)</title><rect x="878.5" y="1589" width="0.7" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="881.50" y="1599.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (1,600,000 samples, 0.09%)</title><rect x="13.1" y="741" width="1.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.13" y="751.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="277" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="18.41" y="287.5" ></text>
</g>
<g >
<title>memcpy@plt (200,000 samples, 0.01%)</title><rect x="464.5" y="1573" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="467.54" y="1583.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.1" y="517" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.15" y="527.5" ></text>
</g>
<g >
<title>decltype (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1173" width="4.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.69" y="1183.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.3" y="325" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.32" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="10.3" y="1189" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.26" y="1199.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (200,000 samples, 0.01%)</title><rect x="876.7" y="1509" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="879.74" y="1519.5" ></text>
</g>
<g >
<title>main (200,000 samples, 0.01%)</title><rect x="10.3" y="1685" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.26" y="1695.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.3" y="1701" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.28" y="1711.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="789" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="17.89" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="15.4" y="373" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="18.41" y="383.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_function_def_stmt (1,000,000 samples, 0.06%)</title><rect x="15.8" y="1173" width="0.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="18.80" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="11.9" y="469" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="14.89" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (4,300,000 samples, 0.24%)</title><rect x="1025.5" y="1541" width="2.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1028.52" y="1551.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (600,000 samples, 0.03%)</title><rect x="1059.3" y="1573" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1062.27" y="1583.5" ></text>
</g>
<g >
<title>decltype (800,000 samples, 0.04%)</title><rect x="15.1" y="645" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.15" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (300,000 samples, 0.02%)</title><rect x="878.2" y="1461" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="881.18" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="10.3" y="1605" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.26" y="1615.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1605" width="6.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.78" y="1615.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (13,400,000 samples, 0.74%)</title><rect x="625.9" y="1573" width="8.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="628.89" y="1583.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (300,000 samples, 0.02%)</title><rect x="943.8" y="1461" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="946.77" y="1471.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (800,000 samples, 0.04%)</title><rect x="901.8" y="1557" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="904.82" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (200,000 samples, 0.01%)</title><rect x="16.1" y="1093" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="19.12" y="1103.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (3,600,000 samples, 0.20%)</title><rect x="1049.2" y="1557" width="2.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1052.23" y="1567.5" ></text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (95,000,000 samples, 5.24%)</title><rect x="953.9" y="1573" width="61.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="956.87" y="1583.5" >unsign..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (1,300,000 samples, 0.07%)</title><rect x="924.6" y="1493" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="927.56" y="1503.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (700,000 samples, 0.04%)</title><rect x="25.8" y="1605" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="28.83" y="1615.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::load_module (200,000 samples, 0.01%)</title><rect x="1189.9" y="1381" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.87" y="1391.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (6,900,000 samples, 0.38%)</title><rect x="478.8" y="1573" width="4.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="481.81" y="1583.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="10.3" y="1397" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.26" y="1407.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="11.4" y="757" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.37" y="767.5" ></text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (700,000 samples, 0.04%)</title><rect x="878.6" y="1573" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="881.63" y="1583.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_braced_statement_list (200,000 samples, 0.01%)</title><rect x="16.5" y="1125" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="19.51" y="1135.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1269" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.78" y="1279.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (4,600,000 samples, 0.25%)</title><rect x="11.7" y="1045" width="3.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.69" y="1055.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (19,000,000 samples, 1.05%)</title><rect x="495.3" y="1541" width="12.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="498.29" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,300,000 samples, 0.07%)</title><rect x="930.8" y="1541" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="933.81" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (16,400,000 samples, 0.91%)</title><rect x="361.7" y="1541" width="10.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="364.69" y="1551.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::unary_op&lt;bool, std::logical_not&gt; (300,000 samples, 0.02%)</title><rect x="1185.9" y="1605" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1188.90" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,600,000 samples, 0.09%)</title><rect x="463.2" y="1525" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="466.17" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,400,000 samples, 0.08%)</title><rect x="943.3" y="1525" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="946.32" y="1535.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="1055.5" y="1493" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1058.49" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (300,000 samples, 0.02%)</title><rect x="11.4" y="869" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="14.37" y="879.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (800,000 samples, 0.04%)</title><rect x="463.7" y="1493" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="466.70" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_loop (700,000 samples, 0.04%)</title><rect x="11.1" y="1365" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="14.11" y="1375.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (600,000 samples, 0.03%)</title><rect x="863.7" y="1557" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="866.65" y="1567.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="853" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="17.89" y="863.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (800,000 samples, 0.04%)</title><rect x="934.7" y="1493" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="937.65" y="1503.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.9" y="1493" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1192.87" y="1503.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.7" y="405" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.67" y="415.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1445" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.41" y="1455.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="10.3" y="1365" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.26" y="1375.5" ></text>
</g>
<g >
<title>bool anzu::vm_stack::pop&lt;bool&gt; (300,000 samples, 0.02%)</title><rect x="1171.8" y="1605" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1174.83" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (800,000 samples, 0.04%)</title><rect x="906.3" y="1541" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="909.32" y="1551.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="965" width="2.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.76" y="975.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.9" y="437" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="14.89" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8,000,000 samples, 0.44%)</title><rect x="1061.9" y="1573" width="5.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1064.87" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.4" y="1205" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.41" y="1215.5" ></text>
</g>
<g >
<title>decltype (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1317" width="5.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.63" y="1327.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,300,000 samples, 0.07%)</title><rect x="525.7" y="1541" width="0.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="528.71" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (600,000 samples, 0.03%)</title><rect x="938.9" y="1557" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="941.89" y="1567.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="933" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.85" y="943.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;unsigned long&gt; (45,900,000 samples, 2.53%)</title><rect x="1015.8" y="1573" width="29.9" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1018.75" y="1583.5" >vo..</text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.5" y="245" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.48" y="255.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (700,000 samples, 0.04%)</title><rect x="891.1" y="1509" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="894.14" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (15,000,000 samples, 0.83%)</title><rect x="1034.7" y="1525" width="9.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1037.71" y="1535.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.3" y="357" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="16.32" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (45,700,000 samples, 2.52%)</title><rect x="1085.0" y="1557" width="29.8" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1088.00" y="1567.5" >st..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1445" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.26" y="1455.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="10.3" y="1493" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.26" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="597" width="0.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.32" y="607.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.9" y="165" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.91" y="175.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1637" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.80" y="1647.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.0" y="357" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.04" y="367.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,200,000 samples, 0.07%)</title><rect x="1055.6" y="1493" width="0.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1058.62" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (900,000 samples, 0.05%)</title><rect x="512.9" y="1573" width="0.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="515.88" y="1583.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="13.6" y="421" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.65" y="431.5" ></text>
</g>
<g >
<title>std::multiplies&lt;unsigned long&gt;::operator (900,000 samples, 0.05%)</title><rect x="909.8" y="1573" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="912.84" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="876.0" y="1541" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="878.96" y="1551.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (600,000 samples, 0.03%)</title><rect x="886.3" y="1509" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="889.26" y="1519.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1221" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.26" y="1231.5" ></text>
</g>
<g >
<title>decltype (600,000 samples, 0.03%)</title><rect x="11.2" y="1109" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.17" y="1119.5" ></text>
</g>
<g >
<title>decltype (900,000 samples, 0.05%)</title><rect x="11.8" y="757" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.76" y="767.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="709" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="719.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;long&gt; (600,000 samples, 0.03%)</title><rect x="1059.3" y="1589" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1062.27" y="1599.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="11.8" y="565" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="14.82" y="575.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (500,000 samples, 0.03%)</title><rect x="1118.2" y="1509" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1121.22" y="1519.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="501" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.32" y="511.5" ></text>
</g>
<g >
<title>_dl_start (300,000 samples, 0.02%)</title><rect x="10.5" y="1685" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="13.52" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (600,000 samples, 0.03%)</title><rect x="883.8" y="1557" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="886.78" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (6,400,000 samples, 0.35%)</title><rect x="556.5" y="1573" width="4.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="559.45" y="1583.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (300,000 samples, 0.02%)</title><rect x="1055.7" y="1477" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1058.68" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (200,000 samples, 0.01%)</title><rect x="1057.7" y="1541" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1060.70" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.9" y="1045" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.87" y="1055.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (400,000 samples, 0.02%)</title><rect x="940.9" y="1493" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="943.91" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (200,000 samples, 0.01%)</title><rect x="16.5" y="1141" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="19.51" y="1151.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1141" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.87" y="1151.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (200,000 samples, 0.01%)</title><rect x="879.1" y="1557" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="882.09" y="1567.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="877.5" y="1509" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="880.53" y="1519.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="12.9" y="773" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.93" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (50,600,000 samples, 2.79%)</title><rect x="982.8" y="1557" width="33.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="985.79" y="1567.5" >st..</text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (900,000 samples, 0.05%)</title><rect x="870.6" y="1525" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="873.56" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (3,900,000 samples, 0.22%)</title><rect x="939.3" y="1557" width="2.5" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="942.28" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="901" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.85" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.1" y="581" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.08" y="591.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="533" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="18.15" y="543.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.5" y="421" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.45" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::back (1,100,000 samples, 0.06%)</title><rect x="693.4" y="1557" width="0.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="696.38" y="1567.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.9" y="725" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.93" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (3,300,000 samples, 0.18%)</title><rect x="446.2" y="1509" width="2.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="449.24" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="14.2" y="661" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.17" y="671.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.0" y="341" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="17.04" y="351.5" ></text>
</g>
<g >
<title>decltype (4,600,000 samples, 0.25%)</title><rect x="11.7" y="1029" width="3.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.69" y="1039.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (600,000 samples, 0.03%)</title><rect x="1048.8" y="1557" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1051.84" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="181" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.41" y="191.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.4" y="1365" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.41" y="1375.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;std::byte*&gt; (3,700,000 samples, 0.20%)</title><rect x="1186.1" y="1605" width="2.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1189.09" y="1615.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (500,000 samples, 0.03%)</title><rect x="887.2" y="1493" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="890.17" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1221" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1231.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::multiplies&gt; (700,000 samples, 0.04%)</title><rect x="1184.3" y="1605" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1187.27" y="1615.5" ></text>
</g>
<g >
<title>anzu::call_frame&amp;&amp; std::forward&lt;anzu::call_frame&gt; (300,000 samples, 0.02%)</title><rect x="694.3" y="1573" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="697.29" y="1583.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (4,300,000 samples, 0.24%)</title><rect x="522.9" y="1541" width="2.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="525.91" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_precedence (300,000 samples, 0.02%)</title><rect x="16.3" y="1109" width="0.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="19.25" y="1119.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="10.3" y="1349" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.26" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="13.5" y="245" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.45" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (13,000,000 samples, 0.72%)</title><rect x="234.0" y="1573" width="8.5" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="237.01" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (400,000 samples, 0.02%)</title><rect x="1058.1" y="1541" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1061.09" y="1551.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (6,800,000 samples, 0.38%)</title><rect x="582.4" y="1509" width="4.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="585.38" y="1519.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (6,200,000 samples, 0.34%)</title><rect x="507.7" y="1541" width="4.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="510.66" y="1551.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="917" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="14.24" y="927.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.4" y="85" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="18.41" y="95.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1589" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.41" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,400,000 samples, 0.08%)</title><rect x="14.9" y="965" width="0.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="17.89" y="975.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (8,100,000 samples, 0.45%)</title><rect x="922.4" y="1541" width="5.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="925.41" y="1551.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1509" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.26" y="1519.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (600,000 samples, 0.03%)</title><rect x="934.7" y="1477" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="937.72" y="1487.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="773" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.87" y="783.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (300,000 samples, 0.02%)</title><rect x="873.3" y="1525" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="876.29" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (4,700,000 samples, 0.26%)</title><rect x="868.1" y="1557" width="3.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="871.08" y="1567.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="10.3" y="1621" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.26" y="1631.5" ></text>
</g>
<g >
<title>anzu::vm_stack::resize (900,000 samples, 0.05%)</title><rect x="1166.6" y="1605" width="0.6" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1169.61" y="1615.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_loop (200,000 samples, 0.01%)</title><rect x="10.8" y="1093" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="13.85" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.9" y="1317" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.87" y="1327.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1141" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.41" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1,400,000 samples, 0.08%)</title><rect x="14.9" y="1029" width="0.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="17.89" y="1039.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (2,800,000 samples, 0.15%)</title><rect x="496.8" y="1525" width="1.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="499.79" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.7" y="917" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.69" y="927.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="12.7" y="453" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.67" y="463.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,800,000 samples, 0.10%)</title><rect x="925.4" y="1493" width="1.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="928.40" y="1503.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="725" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.37" y="735.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1429" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.26" y="1439.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1573" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.41" y="1583.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (600,000 samples, 0.03%)</title><rect x="950.4" y="1573" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="953.35" y="1583.5" ></text>
</g>
<g >
<title>anzu (1,811,500,000 samples, 100.00%)</title><rect x="10.0" y="1717" width="1180.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="1727.5" >anzu</text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (1,300,000 samples, 0.07%)</title><rect x="506.8" y="1477" width="0.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="509.82" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (49,800,000 samples, 2.75%)</title><rect x="425.4" y="1573" width="32.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="428.39" y="1583.5" >st..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (500,000 samples, 0.03%)</title><rect x="513.1" y="1557" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="516.14" y="1567.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (5,400,000 samples, 0.30%)</title><rect x="1107.1" y="1493" width="3.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1110.14" y="1503.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (700,000 samples, 0.04%)</title><rect x="886.7" y="1493" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="889.71" y="1503.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1701" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.80" y="1711.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.5" y="1653" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.54" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1,200,000 samples, 0.07%)</title><rect x="14.9" y="757" width="0.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="17.89" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (5,000,000 samples, 0.28%)</title><rect x="1003.2" y="1493" width="3.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1006.25" y="1503.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.5" y="213" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="16.45" y="223.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1557" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.80" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::load_module (200,000 samples, 0.01%)</title><rect x="10.3" y="1253" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="13.26" y="1263.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (3,400,000 samples, 0.19%)</title><rect x="942.0" y="1557" width="2.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="945.01" y="1567.5" ></text>
</g>
<g >
<title>dl_main (200,000 samples, 0.01%)</title><rect x="10.5" y="1653" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="13.52" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="876.7" y="1525" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="879.68" y="1535.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (9,700,000 samples, 0.54%)</title><rect x="676.7" y="1557" width="6.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="679.70" y="1567.5" ></text>
</g>
<g >
<title>decltype (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1589" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.78" y="1599.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="1118.0" y="1509" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1121.02" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1509" width="6.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1,300,000 samples, 0.07%)</title><rect x="13.3" y="533" width="0.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="16.32" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (800,000 samples, 0.04%)</title><rect x="926.1" y="1477" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="929.06" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="13.1" y="661" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.13" y="671.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="725" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="735.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (200,000 samples, 0.01%)</title><rect x="16.5" y="1109" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="19.51" y="1119.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (1,100,000 samples, 0.06%)</title><rect x="1039.9" y="1461" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1042.92" y="1471.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (12,300,000 samples, 0.68%)</title><rect x="819.3" y="1541" width="8.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="822.29" y="1551.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,600,000 samples, 0.09%)</title><rect x="903.8" y="1525" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="906.84" y="1535.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.6" y="389" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="16.65" y="399.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;anzu::call_frame&gt; (300,000 samples, 0.02%)</title><rect x="1155.1" y="1589" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1158.09" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1541" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.80" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (200,000 samples, 0.01%)</title><rect x="526.9" y="1557" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="529.95" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="13.6" y="405" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.65" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (300,000 samples, 0.02%)</title><rect x="942.5" y="1541" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="945.47" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="12.7" y="581" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.67" y="591.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.5" y="357" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.48" y="367.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="901" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.37" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.4" y="581" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.43" y="591.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.9" y="709" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.93" y="719.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1253" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="1263.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (5,700,000 samples, 0.31%)</title><rect x="1012.0" y="1525" width="3.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1015.04" y="1535.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (500,000 samples, 0.03%)</title><rect x="926.3" y="1461" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="929.25" y="1471.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1205" width="4.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.69" y="1215.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (400,000 samples, 0.02%)</title><rect x="513.2" y="1541" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="516.20" y="1551.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.7" y="949" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.69" y="959.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="15.4" y="101" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="18.41" y="111.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (200,000 samples, 0.01%)</title><rect x="1118.4" y="1477" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1121.41" y="1487.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (600,000 samples, 0.03%)</title><rect x="925.7" y="1477" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="928.66" y="1487.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (500,000 samples, 0.03%)</title><rect x="906.9" y="1525" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="909.90" y="1535.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,700,000 samples, 0.09%)</title><rect x="926.6" y="1525" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="929.58" y="1535.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.3" y="1637" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.28" y="1647.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="14.2" y="789" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.17" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (46,900,000 samples, 2.59%)</title><rect x="796.8" y="1557" width="30.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="799.75" y="1567.5" >__..</text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (26,500,000 samples, 1.46%)</title><rect x="395.7" y="1573" width="17.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="398.69" y="1583.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1125" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.17" y="1135.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (500,000 samples, 0.03%)</title><rect x="864.1" y="1525" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="867.11" y="1535.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.4" y="1333" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1192.41" y="1343.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (6,400,000 samples, 0.35%)</title><rect x="175.1" y="1589" width="4.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="178.06" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.9" y="1397" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.87" y="1407.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1157" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.78" y="1167.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::less_equal&gt; (200,000 samples, 0.01%)</title><rect x="1184.1" y="1605" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1187.07" y="1615.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="869" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.24" y="879.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="453" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.84" y="463.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (8,000,000 samples, 0.44%)</title><rect x="1146.0" y="1509" width="5.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1148.97" y="1519.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::pop_back (1,400,000 samples, 0.08%)</title><rect x="689.9" y="1589" width="0.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="692.92" y="1599.5" ></text>
</g>
<g >
<title>anzu::vm_stack::resize (800,000 samples, 0.04%)</title><rect x="511.7" y="1589" width="0.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="514.70" y="1599.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1141" width="4.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.69" y="1151.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (900,000 samples, 0.05%)</title><rect x="523.2" y="1525" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="526.23" y="1535.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::unary_op&lt;bool, std::logical_not&gt; (17,800,000 samples, 0.98%)</title><rect x="1045.7" y="1589" width="11.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1048.65" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (300,000 samples, 0.02%)</title><rect x="875.6" y="1557" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="878.64" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (600,000 samples, 0.03%)</title><rect x="896.5" y="1525" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="899.48" y="1535.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.5" y="1685" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.54" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (23,000,000 samples, 1.27%)</title><rect x="770.2" y="1557" width="15.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="773.18" y="1567.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.0" y="421" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.04" y="431.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1541" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.78" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1125" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="1135.5" ></text>
</g>
<g >
<title>anzu::vm_stack::size (400,000 samples, 0.02%)</title><rect x="513.5" y="1589" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="516.46" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (200,000 samples, 0.01%)</title><rect x="892.1" y="1573" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="895.12" y="1583.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (3,400,000 samples, 0.19%)</title><rect x="1116.6" y="1573" width="2.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1119.59" y="1583.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="869" width="0.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="17.89" y="879.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (800,000 samples, 0.04%)</title><rect x="1055.9" y="1477" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1058.88" y="1487.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (300,000 samples, 0.02%)</title><rect x="13.5" y="437" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="16.45" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1301" width="5.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="14.63" y="1311.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="933" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.37" y="943.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (200,000 samples, 0.01%)</title><rect x="17.0" y="1541" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="19.97" y="1551.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (400,000 samples, 0.02%)</title><rect x="943.8" y="1477" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="946.77" y="1487.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="10.3" y="1301" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.26" y="1311.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,100,000 samples, 0.06%)</title><rect x="887.5" y="1525" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="890.49" y="1535.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,400,000 samples, 0.08%)</title><rect x="940.5" y="1525" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="943.45" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1365" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="1375.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="14.2" y="485" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.23" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (500,000 samples, 0.03%)</title><rect x="907.4" y="1509" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="910.36" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="10.3" y="1333" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="13.26" y="1343.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="469" width="0.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.32" y="479.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.5" y="325" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="18.54" y="335.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="629" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.87" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (500,000 samples, 0.03%)</title><rect x="890.6" y="1477" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="893.62" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::push_back (5,700,000 samples, 0.31%)</title><rect x="690.8" y="1589" width="3.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="693.84" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (35,800,000 samples, 1.98%)</title><rect x="372.4" y="1557" width="23.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="375.37" y="1567.5" >s..</text>
</g>
<g >
<title>anzu::vm_stack::save (7,600,000 samples, 0.42%)</title><rect x="459.6" y="1573" width="4.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="462.59" y="1583.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (6,000,000 samples, 0.33%)</title><rect x="448.4" y="1509" width="3.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="451.39" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (200,000 samples, 0.01%)</title><rect x="862.9" y="1573" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="865.94" y="1583.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.5" y="405" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="16.45" y="415.5" ></text>
</g>
<g >
<title>decltype (600,000 samples, 0.03%)</title><rect x="11.2" y="1237" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.17" y="1247.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="613" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.87" y="623.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (400,000 samples, 0.02%)</title><rect x="12.1" y="661" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.08" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.5" y="229" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="16.45" y="239.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.4" y="53" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="18.41" y="63.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.4" y="1381" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1192.41" y="1391.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1525" width="6.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.78" y="1535.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="1050.3" y="1509" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1053.34" y="1519.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.3" y="373" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="16.32" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (200,000 samples, 0.01%)</title><rect x="693.5" y="1541" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="696.51" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::bytecode_function, std::allocator&lt;anzu::bytecode_function&gt; &gt;::operator[] (600,000 samples, 0.03%)</title><rect x="596.1" y="1589" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="599.12" y="1599.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (2,900,000 samples, 0.16%)</title><rect x="523.8" y="1525" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="526.82" y="1535.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (400,000 samples, 0.02%)</title><rect x="904.0" y="1493" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="907.04" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="981" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="991.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="895.4" y="1509" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="898.37" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="14.2" y="469" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="17.23" y="479.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,300,000 samples, 0.07%)</title><rect x="886.6" y="1509" width="0.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="889.65" y="1519.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="853" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.85" y="863.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (5,000,000 samples, 0.28%)</title><rect x="1099.9" y="1509" width="3.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1102.91" y="1519.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="15.5" y="373" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.54" y="383.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="10.3" y="1269" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="13.26" y="1279.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (2,400,000 samples, 0.13%)</title><rect x="942.7" y="1541" width="1.5" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="945.67" y="1551.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="485" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="16.32" y="495.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.9" y="69" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="16.91" y="79.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (12,100,000 samples, 0.67%)</title><rect x="578.9" y="1525" width="7.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="581.93" y="1535.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="629" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.32" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (200,000 samples, 0.01%)</title><rect x="907.6" y="1461" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="910.56" y="1471.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="14.2" y="677" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.17" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, anzu::(anonymous namespace)::push_stmt (1,600,000 samples, 0.09%)</title><rect x="13.1" y="757" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="16.13" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,600,000 samples, 0.09%)</title><rect x="873.5" y="1525" width="1.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="876.49" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::apply_op (8,300,000 samples, 0.46%)</title><rect x="17.2" y="1621" width="5.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="20.17" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="13.9" y="117" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.91" y="127.5" ></text>
</g>
<g >
<title>__libc_start_call_main (1,809,300,000 samples, 99.88%)</title><rect x="10.7" y="1669" width="1178.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.72" y="1679.5" >__libc_start_call_main</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (400,000 samples, 0.02%)</title><rect x="870.2" y="1493" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="873.17" y="1503.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.4" y="1637" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.41" y="1647.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="693" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="16.32" y="703.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;char, std::not_equal_to&gt; (300,000 samples, 0.02%)</title><rect x="1183.5" y="1605" width="0.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1186.49" y="1615.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1253" width="5.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="14.63" y="1263.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.7" y="565" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.67" y="575.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (400,000 samples, 0.02%)</title><rect x="1040.9" y="1445" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1043.90" y="1455.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1253" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.41" y="1263.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.9" y="693" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.93" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (6,300,000 samples, 0.35%)</title><rect x="931.7" y="1541" width="4.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="934.66" y="1551.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (7,800,000 samples, 0.43%)</title><rect x="1052.2" y="1573" width="5.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1055.17" y="1583.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.9" y="149" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="16.91" y="159.5" ></text>
</g>
<g >
<title>char anzu::vm_stack::pop&lt;char&gt; (800,000 samples, 0.04%)</title><rect x="526.6" y="1589" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="529.56" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::back (132,200,000 samples, 7.30%)</title><rect x="596.9" y="1589" width="86.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="599.91" y="1599.5" >std::vecto..</text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="789" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.37" y="799.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="15.7" y="917" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="18.67" y="927.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,000,000 samples, 0.06%)</title><rect x="904.9" y="1525" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="907.88" y="1535.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.9" y="501" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.89" y="511.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (200,000 samples, 0.01%)</title><rect x="16.1" y="1061" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="19.12" y="1071.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (200,000 samples, 0.01%)</title><rect x="526.9" y="1573" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="529.95" y="1583.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.5" y="325" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="16.45" y="335.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (300,000 samples, 0.02%)</title><rect x="10.5" y="1669" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="13.52" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,200,000 samples, 0.07%)</title><rect x="890.4" y="1509" width="0.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="893.36" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (3,200,000 samples, 0.18%)</title><rect x="933.7" y="1525" width="2.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="936.68" y="1535.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (4,200,000 samples, 0.23%)</title><rect x="999.3" y="1509" width="2.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1002.27" y="1519.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1253" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.17" y="1263.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="469" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="18.15" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (200,000 samples, 0.01%)</title><rect x="695.4" y="1573" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="698.40" y="1583.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1285" width="5.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="14.63" y="1295.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="981" width="2.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.76" y="991.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.7" y="421" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.67" y="431.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (8,500,000 samples, 0.47%)</title><rect x="452.3" y="1541" width="5.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="455.30" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1125" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.26" y="1135.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1653" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.26" y="1663.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::compile_function (4,900,000 samples, 0.27%)</title><rect x="11.7" y="1077" width="3.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="14.69" y="1087.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (200,000 samples, 0.01%)</title><rect x="887.2" y="1477" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="890.23" y="1487.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (700,000 samples, 0.04%)</title><rect x="1057.9" y="1557" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1060.90" y="1567.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,600,000 samples, 0.09%)</title><rect x="13.1" y="773" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="16.13" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (3,500,000 samples, 0.19%)</title><rect x="462.3" y="1557" width="2.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="465.26" y="1567.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.7" y="885" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="18.67" y="895.5" ></text>
</g>
<g >
<title>long anzu::vm_stack::pop&lt;long&gt; (800,000 samples, 0.04%)</title><rect x="877.1" y="1573" width="0.6" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="880.14" y="1583.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="549" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.15" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (4,600,000 samples, 0.25%)</title><rect x="11.7" y="997" width="3.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.69" y="1007.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.5" y="197" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="16.45" y="207.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1125" width="4.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.69" y="1135.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;unsigned long&gt; (1,100,000 samples, 0.06%)</title><rect x="1188.6" y="1605" width="0.7" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1191.57" y="1615.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="485" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="18.15" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1,300,000 samples, 0.07%)</title><rect x="13.3" y="661" width="0.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="16.32" y="671.5" ></text>
</g>
<g >
<title>operator new (200,000 samples, 0.01%)</title><rect x="693.2" y="1541" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="696.25" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (29,000,000 samples, 1.60%)</title><rect x="1135.1" y="1557" width="18.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1138.09" y="1567.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (4,600,000 samples, 0.25%)</title><rect x="579.4" y="1509" width="3.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="582.38" y="1519.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.9" y="453" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="14.89" y="463.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="12.7" y="501" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.67" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (1,100,000 samples, 0.06%)</title><rect x="696.4" y="1557" width="0.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="699.44" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.7" y="901" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="18.67" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (2,300,000 samples, 0.13%)</title><rect x="863.1" y="1573" width="1.5" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="866.07" y="1583.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (1,000,000 samples, 0.06%)</title><rect x="896.2" y="1557" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="899.22" y="1567.5" ></text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (26,000,000 samples, 1.44%)</title><rect x="910.7" y="1573" width="17.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="913.75" y="1583.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="645" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="16.32" y="655.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::apply_op (1,733,200,000 samples, 95.68%)</title><rect x="26.3" y="1605" width="1129.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="29.28" y="1615.5" >anzu::(anonymous namespace)::apply_op</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.9" y="789" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.87" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::back (141,000,000 samples, 7.78%)</title><rect x="756.2" y="1573" width="91.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="759.17" y="1583.5" >std::vecto..</text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1333" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.78" y="1343.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.0" y="437" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.04" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (300,000 samples, 0.02%)</title><rect x="877.5" y="1525" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="880.46" y="1535.5" ></text>
</g>
<g >
<title>decltype (4,500,000 samples, 0.25%)</title><rect x="11.8" y="901" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.76" y="911.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1173" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.17" y="1183.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (5,200,000 samples, 0.29%)</title><rect x="888.2" y="1573" width="3.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="891.21" y="1583.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="14.2" y="693" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="17.17" y="703.5" ></text>
</g>
<g >
<title>anzu::vm_stack::save (1,900,000 samples, 0.10%)</title><rect x="512.2" y="1589" width="1.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="515.22" y="1599.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.0" y="581" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.95" y="591.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1237" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="1247.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="512.6" y="1573" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="515.62" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="15.5" y="357" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="18.54" y="367.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.4" y="1301" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1192.41" y="1311.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="821" width="2.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.76" y="831.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.3" y="1653" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.28" y="1663.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="613" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="16.32" y="623.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.1" y="629" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.08" y="639.5" ></text>
</g>
<g >
<title>decltype (400,000 samples, 0.02%)</title><rect x="12.1" y="613" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.08" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="14.2" y="725" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.17" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (300,000 samples, 0.02%)</title><rect x="13.8" y="405" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="16.84" y="415.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="213" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="18.41" y="223.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="1013" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.85" y="1023.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1653" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.80" y="1663.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,100,000 samples, 0.06%)</title><rect x="1050.3" y="1525" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1053.34" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (400,000 samples, 0.02%)</title><rect x="11.8" y="613" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="14.82" y="623.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="14.4" y="613" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.43" y="623.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (8,500,000 samples, 0.47%)</title><rect x="1006.5" y="1493" width="5.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1009.50" y="1503.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1173" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.41" y="1183.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.5" y="341" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="16.45" y="351.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.4" y="501" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.41" y="511.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_top_level_statement (1,300,000 samples, 0.07%)</title><rect x="15.8" y="1189" width="0.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="18.80" y="1199.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.4" y="533" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.43" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (1,700,000 samples, 0.09%)</title><rect x="1149.4" y="1477" width="1.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1152.35" y="1487.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="677" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.37" y="687.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.9" y="805" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.87" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (4,900,000 samples, 0.27%)</title><rect x="902.3" y="1557" width="3.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="905.34" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="10.3" y="1285" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="13.26" y="1295.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="965" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="14.37" y="975.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1653" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.41" y="1663.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.7" y="389" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.67" y="399.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;unsigned long&gt; (12,800,000 samples, 0.71%)</title><rect x="927.7" y="1573" width="8.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="930.68" y="1583.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (500,000 samples, 0.03%)</title><rect x="873.7" y="1477" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="876.75" y="1487.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="11.9" y="533" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.89" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,000,000 samples, 0.06%)</title><rect x="1052.2" y="1557" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1055.23" y="1567.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="15.0" y="613" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.95" y="623.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (800,000 samples, 0.04%)</title><rect x="1050.5" y="1509" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1053.54" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1093" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="1103.5" ></text>
</g>
<g >
<title>std::not_equal_to&lt;char&gt;::operator (300,000 samples, 0.02%)</title><rect x="590.2" y="1589" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="593.20" y="1599.5" ></text>
</g>
<g >
<title>std::minus&lt;unsigned long&gt;::operator (1,400,000 samples, 0.08%)</title><rect x="897.7" y="1573" width="0.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="900.65" y="1583.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="11.8" y="581" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="14.82" y="591.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.9" y="85" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="16.91" y="95.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.6" y="453" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.65" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (300,000 samples, 0.02%)</title><rect x="898.6" y="1573" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="901.57" y="1583.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.4" y="645" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.43" y="655.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (200,000 samples, 0.01%)</title><rect x="11.0" y="1365" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="13.98" y="1375.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (200,000 samples, 0.01%)</title><rect x="887.4" y="1477" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="890.36" y="1487.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,600,000 samples, 0.09%)</title><rect x="521.5" y="1557" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="524.54" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="805" width="0.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="17.89" y="815.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="869" width="2.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.76" y="879.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.0" y="565" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.95" y="575.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="709" width="0.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="17.89" y="719.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="901" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="14.24" y="911.5" ></text>
</g>
<g >
<title>decltype (800,000 samples, 0.04%)</title><rect x="15.1" y="517" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.15" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (600,000 samples, 0.03%)</title><rect x="11.2" y="1093" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="14.17" y="1103.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1349" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1359.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (5,700,000 samples, 0.31%)</title><rect x="499.1" y="1509" width="3.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="502.07" y="1519.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1333" width="5.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.63" y="1343.5" ></text>
</g>
<g >
<title>decltype (1,400,000 samples, 0.08%)</title><rect x="14.9" y="1045" width="0.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.89" y="1055.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.2" y="597" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.17" y="607.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;long, std::not_equal_to&gt; (2,200,000 samples, 0.12%)</title><rect x="877.1" y="1589" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="880.07" y="1599.5" ></text>
</g>
<g >
<title>std::byte* anzu::vm_stack::pop&lt;std::byte*&gt; (2,100,000 samples, 0.12%)</title><rect x="1172.1" y="1605" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1175.09" y="1615.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (200,000 samples, 0.01%)</title><rect x="909.7" y="1573" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="912.71" y="1583.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.7" y="517" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.67" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (22,400,000 samples, 1.24%)</title><rect x="997.4" y="1525" width="14.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1000.45" y="1535.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="14.0" y="405" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.04" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (1,809,300,000 samples, 99.88%)</title><rect x="10.7" y="1685" width="1178.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.72" y="1695.5" >__libc_start_main@@GLIBC_2.34</text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1557" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.78" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.9" y="421" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="14.89" y="431.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="757" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.85" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (6,200,000 samples, 0.34%)</title><rect x="884.2" y="1557" width="4.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="887.17" y="1567.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.9" y="1061" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.87" y="1071.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (800,000 samples, 0.04%)</title><rect x="697.2" y="1557" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="700.16" y="1567.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1477" width="6.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.78" y="1487.5" ></text>
</g>
<g >
<title>std::function&lt;void  (700,000 samples, 0.04%)</title><rect x="11.1" y="1349" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="14.11" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_MakeUniq&lt;std::byte []&gt;::__array std::make_unique&lt;std::byte []&gt; (7,000,000 samples, 0.39%)</title><rect x="1167.3" y="1589" width="4.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1170.27" y="1599.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (500,000 samples, 0.03%)</title><rect x="464.2" y="1525" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="467.22" y="1535.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,900,000 samples, 0.10%)</title><rect x="1036.3" y="1493" width="1.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1039.34" y="1503.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (500,000 samples, 0.03%)</title><rect x="864.1" y="1541" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="867.11" y="1551.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (3,100,000 samples, 0.17%)</title><rect x="505.6" y="1493" width="2.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="508.65" y="1503.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,200,000 samples, 0.07%)</title><rect x="895.2" y="1525" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="898.18" y="1535.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (300,000 samples, 0.02%)</title><rect x="874.1" y="1461" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="877.07" y="1471.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1173" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.87" y="1183.5" ></text>
</g>
<g >
<title>char anzu::vm_stack::pop&lt;char&gt; (9,100,000 samples, 0.50%)</title><rect x="865.2" y="1573" width="5.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="868.22" y="1583.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (400,000 samples, 0.02%)</title><rect x="693.6" y="1541" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="696.64" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="997" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.24" y="1007.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="15.4" y="165" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="18.41" y="175.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (11,400,000 samples, 0.63%)</title><rect x="444.9" y="1525" width="7.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="447.87" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,300,000 samples, 0.07%)</title><rect x="895.2" y="1541" width="0.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="898.18" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.7" y="373" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.67" y="383.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="1189.4" y="1413" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1192.41" y="1423.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;long, std::equal_to&gt; (200,000 samples, 0.01%)</title><rect x="874.6" y="1589" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="877.60" y="1599.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.5" y="1669" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.54" y="1679.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.2" y="581" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.17" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="1189.4" y="1349" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.41" y="1359.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (900,000 samples, 0.05%)</title><rect x="904.3" y="1493" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="907.30" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="14.2" y="613" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="17.17" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (400,000 samples, 0.02%)</title><rect x="697.7" y="1573" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="700.68" y="1583.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="12.3" y="677" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.35" y="687.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1157" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.26" y="1167.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (600,000 samples, 0.03%)</title><rect x="943.6" y="1493" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="946.64" y="1503.5" ></text>
</g>
<g >
<title>void anzu::tokenstream::consume_comma_separated_list&lt;anzu::(anonymous namespace)::parse_function_def_stmt (300,000 samples, 0.02%)</title><rect x="16.3" y="1157" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="19.25" y="1167.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (19,000,000 samples, 1.05%)</title><rect x="670.6" y="1573" width="12.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="673.64" y="1583.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.2" y="565" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="17.17" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (700,000 samples, 0.04%)</title><rect x="11.1" y="1333" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="14.11" y="1343.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.0" y="629" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.95" y="639.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="15.4" y="261" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.41" y="271.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="10.3" y="1381" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="13.26" y="1391.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (43,600,000 samples, 2.41%)</title><rect x="483.3" y="1573" width="28.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="486.30" y="1583.5" >st..</text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="213" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.84" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.5" y="293" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.48" y="303.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (1,000,000 samples, 0.06%)</title><rect x="586.2" y="1477" width="0.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="589.16" y="1487.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (800,000 samples, 0.04%)</title><rect x="888.5" y="1557" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="891.47" y="1567.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="693" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.87" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="1117.2" y="1557" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1120.17" y="1567.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (1,700,000 samples, 0.09%)</title><rect x="1165.5" y="1605" width="1.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1168.51" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (18,300,000 samples, 1.01%)</title><rect x="440.4" y="1541" width="11.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="443.38" y="1551.5" ></text>
</g>
<g >
<title>anzu::run_program (1,799,400,000 samples, 99.33%)</title><rect x="17.2" y="1637" width="1172.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="20.17" y="1647.5" >anzu::run_program</text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (600,000 samples, 0.03%)</title><rect x="15.9" y="1125" width="0.4" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="18.86" y="1135.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::multiplies&gt; (43,000,000 samples, 2.37%)</title><rect x="908.0" y="1589" width="28.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="911.01" y="1599.5" >v..</text>
</g>
<g >
<title>decltype (1,300,000 samples, 0.07%)</title><rect x="13.3" y="549" width="0.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.32" y="559.5" ></text>
</g>
<g >
<title>std::less&lt;unsigned long&gt;::operator (300,000 samples, 0.02%)</title><rect x="880.2" y="1573" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="883.20" y="1583.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (18,400,000 samples, 1.02%)</title><rect x="383.7" y="1541" width="12.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="386.70" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.1" y="645" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.08" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (1,500,000 samples, 0.08%)</title><rect x="1044.7" y="1557" width="1.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1047.67" y="1567.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (3,100,000 samples, 0.17%)</title><rect x="448.9" y="1493" width="2.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="451.91" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (4,400,000 samples, 0.24%)</title><rect x="1054.1" y="1541" width="2.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1057.12" y="1551.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="12.3" y="757" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.35" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (200,000 samples, 0.01%)</title><rect x="896.4" y="1525" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="899.35" y="1535.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="14.7" y="997" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.69" y="1007.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="10.8" y="965" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.85" y="975.5" ></text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (7,100,000 samples, 0.39%)</title><rect x="937.2" y="1573" width="4.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="940.19" y="1583.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (300,000 samples, 0.02%)</title><rect x="1056.2" y="1461" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1059.20" y="1471.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.0" y="373" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.04" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (2,200,000 samples, 0.12%)</title><rect x="890.2" y="1525" width="1.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="893.16" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.4" y="1493" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.41" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.0" y="325" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.04" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,400,000 samples, 0.08%)</title><rect x="927.9" y="1557" width="1.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="930.94" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="325" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.84" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (10,600,000 samples, 0.59%)</title><rect x="663.7" y="1557" width="6.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="666.74" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.4" y="1397" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.41" y="1407.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (6,300,000 samples, 0.35%)</title><rect x="1110.7" y="1525" width="4.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1113.66" y="1535.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (13,900,000 samples, 0.77%)</title><rect x="498.6" y="1525" width="9.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="501.61" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (900,000 samples, 0.05%)</title><rect x="11.8" y="741" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="14.76" y="751.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="853" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="863.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="229" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="18.41" y="239.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;long, std::less&gt; (3,400,000 samples, 0.19%)</title><rect x="874.7" y="1589" width="2.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="877.73" y="1599.5" ></text>
</g>
<g >
<title>unsigned long anzu::(anonymous namespace)::read_advance&lt;unsigned long&gt; (8,100,000 samples, 0.45%)</title><rect x="1178.2" y="1605" width="5.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1181.21" y="1615.5" ></text>
</g>
<g >
<title>decltype (1,300,000 samples, 0.07%)</title><rect x="13.3" y="677" width="0.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.32" y="687.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (3,700,000 samples, 0.20%)</title><rect x="576.5" y="1525" width="2.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="579.52" y="1535.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (3,800,000 samples, 0.21%)</title><rect x="583.0" y="1493" width="2.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="585.97" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (300,000 samples, 0.02%)</title><rect x="1189.8" y="1605" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.80" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (9,000,000 samples, 0.50%)</title><rect x="419.5" y="1573" width="5.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="422.53" y="1583.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;unsigned char&gt; (4,400,000 samples, 0.24%)</title><rect x="1116.0" y="1589" width="2.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1119.00" y="1599.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (4,800,000 samples, 0.26%)</title><rect x="871.5" y="1573" width="3.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="874.47" y="1583.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (7,200,000 samples, 0.40%)</title><rect x="1090.4" y="1541" width="4.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1093.40" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (400,000 samples, 0.02%)</title><rect x="1059.4" y="1557" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1062.40" y="1567.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="869.8" y="1509" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="872.84" y="1519.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,400,000 samples, 0.08%)</title><rect x="463.3" y="1509" width="0.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="466.30" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="293" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.41" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (300,000 samples, 0.02%)</title><rect x="878.2" y="1509" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="881.18" y="1519.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="917" width="2.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.76" y="927.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="309" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="16.84" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.3" y="1685" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.28" y="1695.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.9" y="1477" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.87" y="1487.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="15.3" y="389" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.28" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (10,800,000 samples, 0.60%)</title><rect x="634.6" y="1573" width="7.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="637.62" y="1583.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.1" y="645" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="16.13" y="655.5" ></text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (11,600,000 samples, 0.64%)</title><rect x="880.7" y="1573" width="7.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="883.65" y="1583.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="661" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="18.15" y="671.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="693" width="0.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="17.89" y="703.5" ></text>
</g>
<g >
<title>std::logical_not&lt;bool&gt;::operator (700,000 samples, 0.04%)</title><rect x="1051.6" y="1573" width="0.4" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1054.58" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (400,000 samples, 0.02%)</title><rect x="12.1" y="597" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.08" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (2,100,000 samples, 0.12%)</title><rect x="1117.4" y="1557" width="1.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1120.43" y="1567.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (2,200,000 samples, 0.12%)</title><rect x="1039.7" y="1477" width="1.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1042.72" y="1487.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="13.5" y="261" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.45" y="271.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::less&gt; (400,000 samples, 0.02%)</title><rect x="1183.8" y="1605" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1186.81" y="1615.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.7" y="965" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.69" y="975.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="773" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.85" y="783.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="10.8" y="837" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.85" y="847.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.5" y="405" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="18.54" y="415.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1237" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="12.4" y="453" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.41" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (2,500,000 samples, 0.14%)</title><rect x="1055.4" y="1525" width="1.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1058.36" y="1535.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="837" width="0.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="17.89" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt;::data (1,100,000 samples, 0.06%)</title><rect x="694.5" y="1589" width="0.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="697.55" y="1599.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,900,000 samples, 0.33%)</title><rect x="1016.3" y="1557" width="3.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1019.27" y="1567.5" ></text>
</g>
<g >
<title>_start (1,809,300,000 samples, 99.88%)</title><rect x="10.7" y="1701" width="1178.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.72" y="1711.5" >_start</text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="879.0" y="1509" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="881.96" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (300,000 samples, 0.02%)</title><rect x="867.9" y="1557" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="870.89" y="1567.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1349" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.87" y="1359.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (17,800,000 samples, 0.98%)</title><rect x="785.2" y="1557" width="11.6" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="788.16" y="1567.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.3" y="357" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="18.28" y="367.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="13.5" y="389" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.45" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (300,000 samples, 0.02%)</title><rect x="11.4" y="981" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="14.37" y="991.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (200,000 samples, 0.01%)</title><rect x="15.1" y="421" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="18.15" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (4,600,000 samples, 0.25%)</title><rect x="11.7" y="1013" width="3.0" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="14.69" y="1023.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="261" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="16.84" y="271.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="949" width="2.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.76" y="959.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.1" y="709" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.13" y="719.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13,200,000 samples, 0.73%)</title><rect x="188.0" y="1589" width="8.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="190.96" y="1599.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.4" y="421" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.41" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1173" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.26" y="1183.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (6,100,000 samples, 0.34%)</title><rect x="522.6" y="1557" width="4.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="525.58" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="878.2" y="1525" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="881.18" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (600,000 samples, 0.03%)</title><rect x="11.2" y="1221" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="14.17" y="1231.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,400,000 samples, 0.08%)</title><rect x="14.9" y="1061" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="17.89" y="1071.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1605" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.41" y="1615.5" ></text>
</g>
<g >
<title>memcpy@plt (1,400,000 samples, 0.08%)</title><rect x="527.1" y="1589" width="0.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="530.08" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (25,800,000 samples, 1.42%)</title><rect x="572.9" y="1557" width="16.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="575.87" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (600,000 samples, 0.03%)</title><rect x="15.9" y="1157" width="0.4" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="18.86" y="1167.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.5" y="357" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="16.45" y="367.5" ></text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (5,800,000 samples, 0.32%)</title><rect x="892.2" y="1573" width="3.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="895.25" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="12.7" y="437" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.67" y="447.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;unsigned long&gt; (3,800,000 samples, 0.21%)</title><rect x="905.5" y="1573" width="2.5" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="908.54" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::push_back (300,000 samples, 0.02%)</title><rect x="1177.9" y="1605" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1180.95" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (30,200,000 samples, 1.67%)</title><rect x="1095.1" y="1541" width="19.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1098.09" y="1551.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::run&lt;false&gt; (1,791,100,000 samples, 98.87%)</title><rect x="22.6" y="1621" width="1166.7" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="25.57" y="1631.5" >void anzu::(anonymous namespace)::run&lt;false&gt;</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="13.5" y="373" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.45" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="15.4" y="245" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="18.41" y="255.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::unary_op&lt;long, std::negate&gt; (1,800,000 samples, 0.10%)</title><rect x="1057.2" y="1589" width="1.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1060.25" y="1599.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1573" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.80" y="1583.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.2" y="437" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.23" y="447.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1669" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.80" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="10.3" y="1477" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.26" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (400,000 samples, 0.02%)</title><rect x="1057.6" y="1557" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1060.57" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="821" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.37" y="831.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (8,900,000 samples, 0.49%)</title><rect x="1035.4" y="1509" width="5.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1038.36" y="1519.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="853" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.37" y="863.5" ></text>
</g>
<g >
<title>decltype (1,200,000 samples, 0.07%)</title><rect x="14.9" y="901" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.89" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::bytecode_function, std::allocator&lt;anzu::bytecode_function&gt; &gt;::size (600,000 samples, 0.03%)</title><rect x="596.5" y="1589" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="599.52" y="1599.5" ></text>
</g>
<g >
<title>unsigned long anzu::(anonymous namespace)::read_advance&lt;unsigned long&gt; (249,500,000 samples, 13.77%)</title><rect x="697.9" y="1589" width="162.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="700.94" y="1599.5" >unsigned long anzu::..</text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="837" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="847.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.9" y="661" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.87" y="671.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.9" y="805" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.93" y="815.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (400,000 samples, 0.02%)</title><rect x="1055.9" y="1461" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1058.94" y="1471.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.6" y="357" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="16.65" y="367.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="981" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.85" y="991.5" ></text>
</g>
<g >
<title>decltype (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1461" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.78" y="1471.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;char, std::not_equal_to&gt; (15,400,000 samples, 0.85%)</title><rect x="864.6" y="1589" width="10.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="867.56" y="1599.5" ></text>
</g>
<g >
<title>long anzu::vm_stack::pop&lt;long&gt; (900,000 samples, 0.05%)</title><rect x="1057.2" y="1573" width="0.6" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1060.25" y="1583.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.7" y="533" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.67" y="543.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;long, std::minus&gt; (200,000 samples, 0.01%)</title><rect x="876.9" y="1589" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="879.94" y="1599.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (800,000 samples, 0.04%)</title><rect x="877.9" y="1557" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="880.92" y="1567.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (1,200,000 samples, 0.07%)</title><rect x="877.7" y="1573" width="0.8" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="880.72" y="1583.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.3" y="341" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="16.32" y="351.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (900,000 samples, 0.05%)</title><rect x="11.8" y="773" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.76" y="783.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="645" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.87" y="655.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (700,000 samples, 0.04%)</title><rect x="895.5" y="1509" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="898.50" y="1519.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="1050.9" y="1493" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1053.86" y="1503.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (400,000 samples, 0.02%)</title><rect x="907.7" y="1509" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="910.69" y="1519.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (700,000 samples, 0.04%)</title><rect x="695.5" y="1573" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="698.53" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="14.7" y="981" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="17.69" y="991.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (300,000 samples, 0.02%)</title><rect x="869.3" y="1541" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="872.32" y="1551.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (2,100,000 samples, 0.12%)</title><rect x="585.4" y="1493" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="588.44" y="1503.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="10.3" y="1205" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.26" y="1215.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="15.4" y="117" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.41" y="127.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (300,000 samples, 0.02%)</title><rect x="464.0" y="1477" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="466.96" y="1487.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="13.8" y="421" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.84" y="431.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="965" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="975.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::minus&gt; (16,900,000 samples, 0.93%)</title><rect x="897.0" y="1589" width="11.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="900.00" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (300,000 samples, 0.02%)</title><rect x="877.5" y="1541" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="880.46" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1349" width="5.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.63" y="1359.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (800,000 samples, 0.04%)</title><rect x="864.0" y="1557" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="867.04" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="581" width="0.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.32" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,700,000 samples, 0.09%)</title><rect x="934.1" y="1509" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="937.07" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (2,400,000 samples, 0.13%)</title><rect x="940.3" y="1541" width="1.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="943.26" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (500,000 samples, 0.03%)</title><rect x="1053.8" y="1541" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1056.79" y="1551.5" ></text>
</g>
<g >
<title>std::plus&lt;unsigned long&gt;::operator (2,800,000 samples, 0.15%)</title><rect x="950.7" y="1573" width="1.9" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="953.74" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (200,000 samples, 0.01%)</title><rect x="944.4" y="1557" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="947.36" y="1567.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="341" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="18.41" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (13,400,000 samples, 0.74%)</title><rect x="179.2" y="1589" width="8.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="182.23" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (13,800,000 samples, 0.76%)</title><rect x="918.7" y="1557" width="9.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="921.69" y="1567.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="1029" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.85" y="1039.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="10.8" y="1317" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.78" y="1327.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (600,000 samples, 0.03%)</title><rect x="1049.8" y="1541" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1052.82" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_loop (300,000 samples, 0.02%)</title><rect x="11.4" y="1013" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="14.37" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="10.8" y="821" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.85" y="831.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1557" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.26" y="1567.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::plus&gt; (155,300,000 samples, 8.57%)</title><rect x="944.5" y="1589" width="101.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="947.49" y="1599.5" >void anzu::(..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (300,000 samples, 0.02%)</title><rect x="896.6" y="1477" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="899.61" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::back (2,600,000 samples, 0.14%)</title><rect x="696.0" y="1573" width="1.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="698.98" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (2,700,000 samples, 0.15%)</title><rect x="872.8" y="1541" width="1.7" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="875.77" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="11.8" y="661" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.82" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (300,000 samples, 0.02%)</title><rect x="13.8" y="277" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="16.84" y="287.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (3,500,000 samples, 0.19%)</title><rect x="442.6" y="1525" width="2.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="445.59" y="1535.5" ></text>
</g>
<g >
<title>main (1,809,200,000 samples, 99.87%)</title><rect x="10.8" y="1653" width="1178.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.78" y="1663.5" >main</text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (200,000 samples, 0.01%)</title><rect x="879.1" y="1573" width="0.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="882.09" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (4,500,000 samples, 0.25%)</title><rect x="11.8" y="885" width="2.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="14.76" y="895.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (200,000 samples, 0.01%)</title><rect x="875.8" y="1541" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="878.83" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1413" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.26" y="1423.5" ></text>
</g>
<g >
<title>decltype (1,200,000 samples, 0.07%)</title><rect x="14.9" y="773" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.89" y="783.5" ></text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (10,400,000 samples, 0.57%)</title><rect x="898.8" y="1573" width="6.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="901.76" y="1583.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,500,000 samples, 0.08%)</title><rect x="1055.4" y="1509" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1058.42" y="1519.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (600,000 samples, 0.03%)</title><rect x="905.7" y="1557" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="908.73" y="1567.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (800,000 samples, 0.04%)</title><rect x="1040.6" y="1461" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1043.64" y="1471.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (14,000,000 samples, 0.77%)</title><rect x="1142.1" y="1525" width="9.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1145.06" y="1535.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (300,000 samples, 0.02%)</title><rect x="896.0" y="1557" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="899.03" y="1567.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="11.8" y="645" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.82" y="655.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (37,400,000 samples, 2.06%)</title><rect x="1020.1" y="1557" width="24.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1023.12" y="1567.5" >a..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,100,000 samples, 0.06%)</title><rect x="907.2" y="1525" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="910.23" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="981" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.24" y="991.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (500,000 samples, 0.03%)</title><rect x="461.9" y="1557" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="464.94" y="1567.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (400,000 samples, 0.02%)</title><rect x="907.4" y="1477" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="910.43" y="1487.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1269" width="5.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="14.63" y="1279.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (43,700,000 samples, 2.41%)</title><rect x="1125.5" y="1573" width="28.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1128.51" y="1583.5" >an..</text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::less_equal&gt; (8,300,000 samples, 0.46%)</title><rect x="891.6" y="1589" width="5.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="894.60" y="1599.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="940.8" y="1509" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="943.78" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (600,000 samples, 0.03%)</title><rect x="1115.6" y="1573" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1118.61" y="1583.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;std::byte*&gt; (86,500,000 samples, 4.78%)</title><rect x="1059.7" y="1589" width="56.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1062.66" y="1599.5" >void ..</text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.1" y="549" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.08" y="559.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="677" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.15" y="687.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.4" y="485" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.41" y="495.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::not_equal_to&gt; (500,000 samples, 0.03%)</title><rect x="1184.7" y="1605" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1187.72" y="1615.5" ></text>
</g>
<g >
<title>decltype (800,000 samples, 0.04%)</title><rect x="14.2" y="757" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.17" y="767.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="421" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.41" y="431.5" ></text>
</g>
<g >
<title>anzu::parse (1,400,000 samples, 0.08%)</title><rect x="15.8" y="1205" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="18.80" y="1215.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (44,600,000 samples, 2.46%)</title><rect x="560.6" y="1573" width="29.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="563.62" y="1583.5" >st..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (300,000 samples, 0.02%)</title><rect x="877.7" y="1557" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="880.72" y="1567.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (2,800,000 samples, 0.15%)</title><rect x="1139.2" y="1541" width="1.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1142.19" y="1551.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (500,000 samples, 0.03%)</title><rect x="874.1" y="1477" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="877.07" y="1487.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="821" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.87" y="831.5" ></text>
</g>
<g >
<title>std::function&lt;void  (200,000 samples, 0.01%)</title><rect x="10.8" y="1077" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="13.85" y="1087.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::load_module (200,000 samples, 0.01%)</title><rect x="1189.4" y="1269" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.41" y="1279.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1189" width="4.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.69" y="1199.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1157" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.41" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.9" y="1189" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.87" y="1199.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.7" y="629" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.67" y="639.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (6,300,000 samples, 0.35%)</title><rect x="1052.9" y="1557" width="4.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1055.88" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="12.5" y="373" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.48" y="383.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.1" y="629" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="16.13" y="639.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.4" y="549" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.41" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.4" y="581" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.41" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (21,100,000 samples, 1.16%)</title><rect x="1096.9" y="1525" width="13.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1099.92" y="1535.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.2" y="501" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.23" y="511.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="870.4" y="1493" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="873.43" y="1503.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.7" y="933" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="17.69" y="943.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="597" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="18.15" y="607.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1269" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.87" y="1279.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.5" y="389" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="18.54" y="399.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.3" y="421" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="18.28" y="431.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.6" y="437" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="16.65" y="447.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="15.5" y="421" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="18.54" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1589" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.80" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="13.9" y="181" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="16.91" y="191.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (7,500,000 samples, 0.41%)</title><rect x="502.8" y="1509" width="4.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="505.78" y="1519.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="12.4" y="469" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.41" y="479.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (5,500,000 samples, 0.30%)</title><rect x="1037.6" y="1493" width="3.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1040.57" y="1503.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1077" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="14.17" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="12.5" y="309" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.48" y="319.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="14.2" y="533" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="17.23" y="543.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.1" y="581" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.13" y="591.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1541" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.41" y="1551.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::less&gt; (18,900,000 samples, 1.04%)</title><rect x="879.3" y="1589" width="12.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="882.29" y="1599.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1237" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.41" y="1247.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (27,200,000 samples, 1.50%)</title><rect x="494.0" y="1557" width="17.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="496.99" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (700,000 samples, 0.04%)</title><rect x="11.1" y="1285" width="0.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.11" y="1295.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (17,200,000 samples, 0.95%)</title><rect x="575.6" y="1541" width="11.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="578.61" y="1551.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (900,000 samples, 0.05%)</title><rect x="876.4" y="1557" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="879.35" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1237" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.26" y="1247.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="864.2" y="1509" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="867.24" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="15.0" y="597" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="17.95" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.3" y="1669" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.28" y="1679.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.3" y="1621" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.28" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::bytecode_function, std::allocator&lt;anzu::bytecode_function&gt; &gt;::operator[] (200,000 samples, 0.01%)</title><rect x="1173.5" y="1605" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1176.45" y="1615.5" ></text>
</g>
<g >
<title>_dl_relocate_object (200,000 samples, 0.01%)</title><rect x="10.5" y="1637" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="13.52" y="1647.5" ></text>
</g>
<g >
<title>anzu::vm_stack::vm_stack (7,000,000 samples, 0.39%)</title><rect x="1167.3" y="1605" width="4.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1170.27" y="1615.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (40,500,000 samples, 2.24%)</title><rect x="242.5" y="1573" width="26.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="245.48" y="1583.5" >_..</text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1525" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.26" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="14.0" y="453" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="17.04" y="463.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (300,000 samples, 0.02%)</title><rect x="12.7" y="645" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.67" y="655.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="895.8" y="1493" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="898.77" y="1503.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,200,000 samples, 0.07%)</title><rect x="869.8" y="1525" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="872.77" y="1535.5" ></text>
</g>
<g >
<title>memcpy@plt (200,000 samples, 0.01%)</title><rect x="944.2" y="1557" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="947.23" y="1567.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (500,000 samples, 0.03%)</title><rect x="894.9" y="1541" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="897.85" y="1551.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::not_equal_to&gt; (13,000,000 samples, 0.72%)</title><rect x="936.0" y="1589" width="8.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="939.02" y="1599.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (900,000 samples, 0.05%)</title><rect x="876.4" y="1573" width="0.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="879.35" y="1583.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (300,000 samples, 0.02%)</title><rect x="904.7" y="1477" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="907.69" y="1487.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.4" y="517" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.41" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="1189.9" y="1461" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.87" y="1471.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.3" y="437" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.32" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (400,000 samples, 0.02%)</title><rect x="464.7" y="1573" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="467.67" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (24,800,000 samples, 1.37%)</title><rect x="1028.3" y="1541" width="16.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1031.32" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1141" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.17" y="1151.5" ></text>
</g>
<g >
<title>unsigned char anzu::(anonymous namespace)::read_advance&lt;unsigned char&gt; (4,100,000 samples, 0.23%)</title><rect x="695.3" y="1589" width="2.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="698.27" y="1599.5" ></text>
</g>
<g >
<title>bool anzu::vm_stack::pop&lt;bool&gt; (19,700,000 samples, 1.09%)</title><rect x="513.7" y="1589" width="12.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="516.72" y="1599.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="405" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="18.41" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (2,000,000 samples, 0.11%)</title><rect x="952.6" y="1573" width="1.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="955.57" y="1583.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="1189.8" y="1685" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.80" y="1695.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (1,800,000 samples, 0.10%)</title><rect x="523.9" y="1509" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="526.88" y="1519.5" ></text>
</g>
<g >
<title>long anzu::vm_stack::pop&lt;long&gt; (1,900,000 samples, 0.10%)</title><rect x="875.0" y="1573" width="1.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="877.99" y="1583.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="11.2" y="949" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.24" y="959.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="12.3" y="773" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.35" y="783.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="853" width="2.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.76" y="863.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="943.5" y="1493" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="946.51" y="1503.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="389" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="16.84" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (900,000 samples, 0.05%)</title><rect x="896.3" y="1541" width="0.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="899.29" y="1551.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,400,000 samples, 0.08%)</title><rect x="904.0" y="1509" width="0.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="906.97" y="1519.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (3,500,000 samples, 0.19%)</title><rect x="1148.9" y="1493" width="2.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1151.90" y="1503.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="13.9" y="133" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.91" y="143.5" ></text>
</g>
<g >
<title>anzu::call_frame&amp; std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::emplace_back&lt;anzu::call_frame&gt; (4,600,000 samples, 0.25%)</title><rect x="691.3" y="1573" width="3.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="694.29" y="1583.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1077" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.87" y="1087.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (400,000 samples, 0.02%)</title><rect x="1150.9" y="1461" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1153.92" y="1471.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.3" y="405" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="18.28" y="415.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="341" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.84" y="351.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.4" y="565" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.43" y="575.5" ></text>
</g>
<g >
<title>anzu::vm_stack::pop_and_save (10,900,000 samples, 0.60%)</title><rect x="457.8" y="1589" width="7.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="460.83" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (4,600,000 samples, 0.25%)</title><rect x="11.7" y="1061" width="3.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.69" y="1071.5" ></text>
</g>
<g >
<title>decltype (400,000 samples, 0.02%)</title><rect x="12.4" y="613" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.41" y="623.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="878.2" y="1477" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="881.18" y="1487.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="757" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.87" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,300,000 samples, 0.07%)</title><rect x="932.8" y="1525" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="935.83" y="1535.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (200,000 samples, 0.01%)</title><rect x="870.4" y="1477" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="873.43" y="1487.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_while_stmt (200,000 samples, 0.01%)</title><rect x="17.0" y="1589" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="19.97" y="1599.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (73,300,000 samples, 4.05%)</title><rect x="324.6" y="1557" width="47.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="327.62" y="1567.5" >__gn..</text>
</g>
<g >
<title>unsigned long anzu::vm_stack::pop&lt;unsigned long&gt; (6,300,000 samples, 0.35%)</title><rect x="860.5" y="1589" width="4.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="863.46" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1445" width="6.0" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.78" y="1455.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (4,600,000 samples, 0.25%)</title><rect x="1031.7" y="1525" width="3.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1034.71" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="437" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="18.15" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.5" y="341" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="18.54" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (300,000 samples, 0.02%)</title><rect x="10.8" y="1301" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.78" y="1311.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.4" y="1509" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.41" y="1519.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="517" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="16.32" y="527.5" ></text>
</g>
<g >
<title>memcpy@plt (300,000 samples, 0.02%)</title><rect x="1044.5" y="1557" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1047.48" y="1567.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1525" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.41" y="1535.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (700,000 samples, 0.04%)</title><rect x="939.8" y="1541" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="942.80" y="1551.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,300,000 samples, 0.07%)</title><rect x="873.6" y="1509" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="876.55" y="1519.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.4" y="565" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.41" y="575.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.9" y="1509" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.87" y="1519.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (3,200,000 samples, 0.18%)</title><rect x="1146.8" y="1493" width="2.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1149.81" y="1503.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.3" y="325" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="18.28" y="335.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (400,000 samples, 0.02%)</title><rect x="907.4" y="1493" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="910.43" y="1503.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (2,100,000 samples, 0.12%)</title><rect x="1109.3" y="1477" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1112.29" y="1487.5" ></text>
</g>
<g >
<title>memcpy@plt (1,300,000 samples, 0.07%)</title><rect x="1114.8" y="1573" width="0.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1117.76" y="1583.5" ></text>
</g>
<g >
<title>__libc_start_call_main (200,000 samples, 0.01%)</title><rect x="10.3" y="1701" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.26" y="1711.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1061" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.17" y="1071.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.9" y="405" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.89" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (2,500,000 samples, 0.14%)</title><rect x="869.5" y="1541" width="1.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="872.51" y="1551.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1589" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.26" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_braced_statement_list (200,000 samples, 0.01%)</title><rect x="17.0" y="1557" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="19.97" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.2" y="421" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="17.23" y="431.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.9" y="1205" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.87" y="1215.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1269" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.17" y="1279.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,600,000 samples, 0.09%)</title><rect x="921.4" y="1541" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="924.37" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="14.4" y="597" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="17.43" y="607.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="15.0" y="661" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="17.95" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (300,000 samples, 0.02%)</title><rect x="878.9" y="1525" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="881.89" y="1535.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="885" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.87" y="895.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_braced_statement_list (200,000 samples, 0.01%)</title><rect x="16.1" y="1077" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="19.12" y="1087.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (400,000 samples, 0.02%)</title><rect x="878.8" y="1557" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="881.83" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::back (6,400,000 samples, 0.35%)</title><rect x="1173.7" y="1605" width="4.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1176.72" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (2,500,000 samples, 0.14%)</title><rect x="462.9" y="1541" width="1.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="465.91" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1381" width="6.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1391.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="12.3" y="661" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.35" y="671.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (400,000 samples, 0.02%)</title><rect x="1118.5" y="1525" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1121.54" y="1535.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.0" y="549" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="17.95" y="559.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.1" y="597" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.13" y="607.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="821" width="0.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="17.89" y="831.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (300,000 samples, 0.02%)</title><rect x="13.8" y="197" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="16.84" y="207.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.5" y="277" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="16.45" y="287.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.9" y="789" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.93" y="799.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, anzu::(anonymous namespace)::push_stmt (700,000 samples, 0.04%)</title><rect x="11.1" y="1317" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="14.11" y="1327.5" ></text>
</g>
<g >
<title>anzu::op anzu::(anonymous namespace)::read_advance&lt;anzu::op&gt; (7,300,000 samples, 0.40%)</title><rect x="1155.3" y="1605" width="4.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1158.28" y="1615.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="10.8" y="1189" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.78" y="1199.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (3,600,000 samples, 0.20%)</title><rect x="1104.8" y="1493" width="2.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1107.80" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.2" y="549" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.17" y="559.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (15,400,000 samples, 0.85%)</title><rect x="1002.0" y="1509" width="10.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1005.01" y="1519.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,000,000 samples, 0.06%)</title><rect x="525.1" y="1509" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="528.06" y="1519.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.9" y="741" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.93" y="751.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (5,100,000 samples, 0.28%)</title><rect x="1041.2" y="1509" width="3.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1044.16" y="1519.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1285" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.78" y="1295.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (71,800,000 samples, 3.96%)</title><rect x="464.9" y="1589" width="46.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="467.93" y="1599.5" >anzu..</text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.4" y="645" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.41" y="655.5" ></text>
</g>
<g >
<title>long anzu::vm_stack::pop&lt;long&gt; (200,000 samples, 0.01%)</title><rect x="874.6" y="1573" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="877.60" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (9,700,000 samples, 0.54%)</title><rect x="520.2" y="1573" width="6.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="523.24" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1573" width="6.0" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.78" y="1583.5" ></text>
</g>
<g >
<title>all (1,811,500,000 samples, 100%)</title><rect x="10.0" y="1733" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1743.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1029" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.87" y="1039.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,400,000 samples, 0.08%)</title><rect x="14.9" y="1077" width="0.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="17.89" y="1087.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (300,000 samples, 0.02%)</title><rect x="871.3" y="1573" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="874.27" y="1583.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1093" width="4.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.69" y="1103.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (1,000,000 samples, 0.06%)</title><rect x="873.7" y="1493" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="876.75" y="1503.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (3,000,000 samples, 0.17%)</title><rect x="1144.0" y="1509" width="2.0" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1147.01" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="869" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.85" y="879.5" ></text>
</g>
<g >
<title>memcpy@plt (800,000 samples, 0.04%)</title><rect x="1154.0" y="1573" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1156.98" y="1583.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (600,000 samples, 0.03%)</title><rect x="1116.2" y="1573" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1119.20" y="1583.5" ></text>
</g>
<g >
<title>anzu::vm_stack::at (8,200,000 samples, 0.45%)</title><rect x="1160.0" y="1605" width="5.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1163.04" y="1615.5" ></text>
</g>
<g >
<title>void anzu::(anonymous namespace)::binary_op&lt;unsigned long, std::plus&gt; (1,300,000 samples, 0.07%)</title><rect x="1185.0" y="1605" width="0.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1188.05" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="1059.4" y="1541" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1062.40" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (32,100,000 samples, 1.77%)</title><rect x="994.8" y="1541" width="21.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="997.84" y="1551.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (300,000 samples, 0.02%)</title><rect x="941.8" y="1557" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="944.82" y="1567.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (73,200,000 samples, 4.04%)</title><rect x="1067.1" y="1573" width="47.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1070.08" y="1583.5" >anzu..</text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="597" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.87" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (2,100,000 samples, 0.12%)</title><rect x="450.9" y="1493" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="453.93" y="1503.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (1,300,000 samples, 0.07%)</title><rect x="1058.4" y="1589" width="0.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1061.42" y="1599.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (300,000 samples, 0.02%)</title><rect x="895.6" y="1493" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.57" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (400,000 samples, 0.02%)</title><rect x="10.0" y="1701" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (500,000 samples, 0.03%)</title><rect x="876.6" y="1541" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="879.61" y="1551.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="11.8" y="597" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="14.82" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,600,000 samples, 0.09%)</title><rect x="1117.8" y="1541" width="1.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1120.76" y="1551.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.4" y="405" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.41" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (800,000 samples, 0.04%)</title><rect x="14.2" y="741" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="17.17" y="751.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="890.9" y="1477" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="893.95" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (500,000 samples, 0.03%)</title><rect x="910.4" y="1573" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="913.42" y="1583.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.7" y="1013" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.69" y="1023.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="789" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.85" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (600,000 samples, 0.03%)</title><rect x="894.0" y="1557" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="897.01" y="1567.5" ></text>
</g>
<g >
<title>anzu::compile (200,000 samples, 0.01%)</title><rect x="1189.4" y="1685" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1192.41" y="1695.5" ></text>
</g>
<g >
<title>std::multiplies&lt;unsigned long&gt;::operator (400,000 samples, 0.02%)</title><rect x="589.9" y="1589" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="592.94" y="1599.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (700,000 samples, 0.04%)</title><rect x="941.4" y="1525" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="944.36" y="1535.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (33,300,000 samples, 1.84%)</title><rect x="292.8" y="1557" width="21.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="295.77" y="1567.5" >_..</text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="896.6" y="1493" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="899.61" y="1503.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (1,400,000 samples, 0.08%)</title><rect x="14.9" y="981" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="17.89" y="991.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.1" y="533" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.08" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (200,000 samples, 0.01%)</title><rect x="907.4" y="1461" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="910.43" y="1471.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (900,000 samples, 0.05%)</title><rect x="11.8" y="725" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="14.76" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (4,100,000 samples, 0.23%)</title><rect x="885.5" y="1541" width="2.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="888.54" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.2" y="405" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.23" y="415.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="12.5" y="325" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.48" y="335.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="997" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.85" y="1007.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (12,900,000 samples, 0.71%)</title><rect x="839.6" y="1541" width="8.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="842.62" y="1551.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.6" y="373" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="16.65" y="383.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.5" y="261" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="15.48" y="271.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.3" y="341" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="18.28" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,800,000 samples, 0.10%)</title><rect x="917.5" y="1557" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="920.52" y="1567.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;long&gt; (800,000 samples, 0.04%)</title><rect x="1057.9" y="1573" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1060.90" y="1583.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="613" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="18.15" y="623.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="12.3" y="693" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.35" y="703.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (500,000 samples, 0.03%)</title><rect x="904.4" y="1477" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="907.36" y="1487.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (800,000 samples, 0.04%)</title><rect x="870.0" y="1509" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="873.04" y="1519.5" ></text>
</g>
<g >
<title>anzu::op anzu::(anonymous namespace)::read_advance&lt;anzu::op&gt; (332,000,000 samples, 18.33%)</title><rect x="196.7" y="1589" width="216.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="199.69" y="1599.5" >anzu::op anzu::(anonymous na..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1157" width="4.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="14.69" y="1167.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="965" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.24" y="975.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1157" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.87" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator- (44,500,000 samples, 2.46%)</title><rect x="641.7" y="1573" width="28.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="644.66" y="1583.5" >__..</text>
</g>
<g >
<title>std::plus&lt;unsigned long&gt;::operator (1,100,000 samples, 0.06%)</title><rect x="590.5" y="1589" width="0.7" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="593.46" y="1599.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1301" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.87" y="1311.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_function_def_stmt (300,000 samples, 0.02%)</title><rect x="16.3" y="1141" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="19.25" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (15,600,000 samples, 0.86%)</title><rect x="314.5" y="1557" width="10.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="317.46" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1397" width="6.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.78" y="1407.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.0" y="645" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.95" y="655.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.9" y="1333" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.87" y="1343.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (200,000 samples, 0.01%)</title><rect x="11.4" y="661" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="14.37" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (300,000 samples, 0.02%)</title><rect x="877.5" y="1557" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="880.46" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_precedence (200,000 samples, 0.01%)</title><rect x="16.0" y="1093" width="0.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="18.99" y="1103.5" ></text>
</g>
<g >
<title>std::byte* std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt;::_M_data_ptr&lt;std::byte&gt; (300,000 samples, 0.02%)</title><rect x="695.1" y="1573" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="698.07" y="1583.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (800,000 samples, 0.04%)</title><rect x="1051.1" y="1525" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1054.06" y="1535.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (400,000 samples, 0.02%)</title><rect x="876.0" y="1525" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="878.96" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.9" y="917" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.87" y="927.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1221" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.87" y="1231.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.0" y="533" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.95" y="543.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (700,000 samples, 0.04%)</title><rect x="940.9" y="1509" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="943.91" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1109" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.78" y="1119.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (300,000 samples, 0.02%)</title><rect x="16.9" y="1605" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="19.90" y="1615.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="837" width="2.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.76" y="847.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="565" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="16.32" y="575.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.4" y="549" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="17.43" y="559.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (4,100,000 samples, 0.23%)</title><rect x="941.8" y="1573" width="2.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="944.82" y="1583.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (400,000 samples, 0.02%)</title><rect x="697.4" y="1541" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="700.42" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="933" width="0.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="17.89" y="943.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1429" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.41" y="1439.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.6" y="341" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.65" y="351.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="11.9" y="485" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.89" y="495.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1141" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.78" y="1151.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="889.4" y="1541" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="892.38" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="15.3" y="373" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="18.28" y="383.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (900,000 samples, 0.05%)</title><rect x="1056.4" y="1509" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1059.40" y="1519.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="14.2" y="629" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="17.17" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,600,000 samples, 0.09%)</title><rect x="13.1" y="789" width="1.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="16.13" y="799.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (300,000 samples, 0.02%)</title><rect x="1050.9" y="1477" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1053.86" y="1487.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.4" y="629" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.43" y="639.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="14.2" y="517" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="17.23" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="15.7" y="853" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="18.67" y="863.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (900,000 samples, 0.05%)</title><rect x="1118.0" y="1525" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1120.96" y="1535.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="357" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="16.84" y="367.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.1" y="565" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.08" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (800,000 samples, 0.04%)</title><rect x="15.1" y="629" width="0.6" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="18.15" y="639.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (6,300,000 samples, 0.35%)</title><rect x="11.7" y="1109" width="4.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.69" y="1119.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="10.3" y="1317" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.26" y="1327.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (11,500,000 samples, 0.63%)</title><rect x="1103.2" y="1509" width="7.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1106.17" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.4" y="37" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="18.41" y="47.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="14.2" y="773" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.17" y="783.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="14.2" y="645" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.17" y="655.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1557" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.41" y="1567.5" ></text>
</g>
<g >
<title>anzu::call_frame&amp; std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::emplace_back&lt;anzu::call_frame&gt; (200,000 samples, 0.01%)</title><rect x="196.6" y="1589" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="199.56" y="1599.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_top_level_statement (400,000 samples, 0.02%)</title><rect x="16.8" y="1621" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="19.84" y="1631.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.4" y="69" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="18.41" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (300,000 samples, 0.02%)</title><rect x="693.9" y="1541" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="696.90" y="1551.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (800,000 samples, 0.04%)</title><rect x="1054.8" y="1525" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1057.84" y="1535.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1461" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.26" y="1471.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (500,000 samples, 0.03%)</title><rect x="13.3" y="453" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="16.32" y="463.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1205" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.78" y="1215.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="837" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.37" y="847.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="949" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.37" y="959.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_struct_stmt (300,000 samples, 0.02%)</title><rect x="16.4" y="1173" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="19.45" y="1183.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.4" y="389" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.41" y="399.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (8,000,000 samples, 0.44%)</title><rect x="11.6" y="1365" width="5.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.63" y="1375.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.4" y="133" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="18.41" y="143.5" ></text>
</g>
<g >
<title>decltype  (600,000 samples, 0.03%)</title><rect x="693.0" y="1557" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="695.99" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="853" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.24" y="863.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.3" y="421" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="16.32" y="431.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="437" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="16.84" y="447.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="869" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.87" y="879.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::resolve_type (300,000 samples, 0.02%)</title><rect x="14.7" y="1061" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="17.69" y="1071.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1157" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.17" y="1167.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (200,000 samples, 0.01%)</title><rect x="1189.9" y="1525" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1192.87" y="1535.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (800,000 samples, 0.04%)</title><rect x="943.5" y="1509" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="946.51" y="1519.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (9,300,000 samples, 0.51%)</title><rect x="10.8" y="1413" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.78" y="1423.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (800,000 samples, 0.04%)</title><rect x="1110.1" y="1461" width="0.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1113.14" y="1471.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (3,500,000 samples, 0.19%)</title><rect x="903.3" y="1541" width="2.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="906.26" y="1551.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (200,000 samples, 0.01%)</title><rect x="10.5" y="1621" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="13.52" y="1631.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (800,000 samples, 0.04%)</title><rect x="890.6" y="1493" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="893.62" y="1503.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.4" y="437" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.41" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.4" y="1621" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.41" y="1631.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (200,000 samples, 0.01%)</title><rect x="895.8" y="1477" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.83" y="1487.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="11.2" y="885" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="14.24" y="895.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (800,000 samples, 0.04%)</title><rect x="14.2" y="709" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.17" y="719.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (800,000 samples, 0.04%)</title><rect x="12.3" y="789" width="0.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.35" y="799.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_loop (1,600,000 samples, 0.09%)</title><rect x="13.1" y="805" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="16.13" y="815.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="12.4" y="533" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.41" y="543.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="197" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="18.41" y="207.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (3,100,000 samples, 0.17%)</title><rect x="503.6" y="1493" width="2.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="506.63" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::bytecode_function, std::allocator&lt;anzu::bytecode_function&gt; &gt;::size (200,000 samples, 0.01%)</title><rect x="1173.6" y="1605" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1176.58" y="1615.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::compile_function (300,000 samples, 0.02%)</title><rect x="10.8" y="1365" width="0.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="13.78" y="1375.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="864.4" y="1541" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="867.43" y="1551.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="876.7" y="1493" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="879.74" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (900,000 samples, 0.05%)</title><rect x="1154.5" y="1573" width="0.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1157.50" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (300,000 samples, 0.02%)</title><rect x="11.4" y="741" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="14.37" y="751.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (800,000 samples, 0.04%)</title><rect x="15.1" y="501" width="0.6" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="18.15" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (1,200,000 samples, 0.07%)</title><rect x="884.8" y="1541" width="0.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="887.76" y="1551.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="357" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="18.41" y="367.5" ></text>
</g>
<g >
<title>bool anzu::vm_stack::pop&lt;bool&gt; (7,100,000 samples, 0.39%)</title><rect x="1047.0" y="1573" width="4.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1049.95" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (3,000,000 samples, 0.17%)</title><rect x="889.6" y="1541" width="2.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="892.64" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.5" y="181" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.45" y="191.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="13.8" y="293" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.84" y="303.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (4,000,000 samples, 0.22%)</title><rect x="889.0" y="1557" width="2.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="891.99" y="1567.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (2,200,000 samples, 0.12%)</title><rect x="886.1" y="1525" width="1.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="889.06" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (300,000 samples, 0.02%)</title><rect x="14.7" y="1045" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="17.69" y="1055.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.1" y="613" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="16.13" y="623.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (4,500,000 samples, 0.25%)</title><rect x="11.8" y="933" width="2.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.76" y="943.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (300,000 samples, 0.02%)</title><rect x="10.8" y="1173" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.78" y="1183.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,400,000 samples, 0.08%)</title><rect x="14.9" y="1013" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="17.89" y="1023.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="805" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.85" y="815.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="10.8" y="949" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.85" y="959.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (5,500,000 samples, 0.30%)</title><rect x="923.0" y="1525" width="3.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="925.99" y="1535.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="773" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.37" y="783.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1189" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.17" y="1199.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (300,000 samples, 0.02%)</title><rect x="1057.1" y="1557" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1060.05" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::operator* (200,000 samples, 0.01%)</title><rect x="696.3" y="1557" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="699.31" y="1567.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="13.1" y="677" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="16.13" y="687.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1253" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.78" y="1263.5" ></text>
</g>
<g >
<title>_dl_start_user (300,000 samples, 0.02%)</title><rect x="10.5" y="1701" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="13.52" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1,200,000 samples, 0.07%)</title><rect x="14.9" y="885" width="0.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="17.89" y="895.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (1,700,000 samples, 0.09%)</title><rect x="906.8" y="1541" width="1.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="909.84" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (19,900,000 samples, 1.10%)</title><rect x="1141.0" y="1541" width="13.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1144.02" y="1551.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="1118.3" y="1493" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1121.35" y="1503.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (500,000 samples, 0.03%)</title><rect x="459.3" y="1573" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="462.27" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (600,000 samples, 0.03%)</title><rect x="875.8" y="1557" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="878.83" y="1567.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (10,600,000 samples, 0.59%)</title><rect x="928.9" y="1557" width="6.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="931.86" y="1567.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.5" y="277" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.48" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (200,000 samples, 0.01%)</title><rect x="1189.5" y="1701" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.54" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (300,000 samples, 0.02%)</title><rect x="1059.4" y="1525" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1062.40" y="1535.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (800,000 samples, 0.04%)</title><rect x="14.2" y="805" width="0.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="17.17" y="815.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.7" y="549" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="15.67" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (200,000 samples, 0.01%)</title><rect x="1052.0" y="1573" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1055.03" y="1583.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (4,400,000 samples, 0.24%)</title><rect x="586.8" y="1541" width="2.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="589.81" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_function_def_stmt (200,000 samples, 0.01%)</title><rect x="16.5" y="1157" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="19.51" y="1167.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (800,000 samples, 0.04%)</title><rect x="525.1" y="1493" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="528.12" y="1503.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.9" y="933" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.87" y="943.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (300,000 samples, 0.02%)</title><rect x="896.6" y="1509" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="899.61" y="1519.5" ></text>
</g>
<g >
<title>std::function&lt;void  (300,000 samples, 0.02%)</title><rect x="11.4" y="997" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="14.37" y="1007.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="373" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.84" y="383.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (900,000 samples, 0.05%)</title><rect x="11.8" y="677" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.76" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (3,500,000 samples, 0.19%)</title><rect x="1009.8" y="1477" width="2.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1012.76" y="1487.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1637" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.26" y="1647.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (400,000 samples, 0.02%)</title><rect x="11.8" y="549" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.82" y="559.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::resolve_type (200,000 samples, 0.01%)</title><rect x="15.7" y="933" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="18.67" y="943.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (7,600,000 samples, 0.42%)</title><rect x="567.9" y="1557" width="5.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="570.92" y="1567.5" ></text>
</g>
<g >
<title>decltype (800,000 samples, 0.04%)</title><rect x="12.3" y="741" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="15.35" y="751.5" ></text>
</g>
<g >
<title>main (200,000 samples, 0.01%)</title><rect x="1189.4" y="1701" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1192.41" y="1711.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (4,300,000 samples, 0.24%)</title><rect x="1151.2" y="1525" width="2.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1154.18" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (7,600,000 samples, 0.42%)</title><rect x="591.2" y="1589" width="4.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="594.17" y="1599.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="944.0" y="1509" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="947.03" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::type_of_expr (300,000 samples, 0.02%)</title><rect x="14.4" y="661" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="17.43" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (600,000 samples, 0.03%)</title><rect x="878.0" y="1541" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="881.05" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="11.2" y="933" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="14.24" y="943.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (3,800,000 samples, 0.21%)</title><rect x="1132.6" y="1557" width="2.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1135.61" y="1567.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;bool&gt; (1,500,000 samples, 0.08%)</title><rect x="896.0" y="1573" width="1.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="899.03" y="1583.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (900,000 samples, 0.05%)</title><rect x="11.8" y="709" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="14.76" y="719.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="13.8" y="245" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.84" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (900,000 samples, 0.05%)</title><rect x="871.5" y="1557" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="874.47" y="1567.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (500,000 samples, 0.03%)</title><rect x="934.3" y="1493" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="937.33" y="1503.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="997" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.87" y="1007.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;anzu::call_frame*, std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt; &gt;::__normal_iterator (400,000 samples, 0.02%)</title><rect x="696.9" y="1541" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="699.89" y="1551.5" ></text>
</g>
<g >
<title>anzu::parse (500,000 samples, 0.03%)</title><rect x="16.8" y="1637" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="19.84" y="1647.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (3,700,000 samples, 0.20%)</title><rect x="924.2" y="1509" width="2.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="927.17" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.5" y="309" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.45" y="319.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_expression (300,000 samples, 0.02%)</title><rect x="16.3" y="1125" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="19.25" y="1135.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="874.4" y="1509" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="877.40" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1541" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.26" y="1551.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="12.7" y="613" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.67" y="623.5" ></text>
</g>
<g >
<title>std::not_equal_to&lt;unsigned long&gt;::operator (400,000 samples, 0.02%)</title><rect x="936.7" y="1573" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="939.74" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (2,100,000 samples, 0.12%)</title><rect x="1050.2" y="1541" width="1.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1053.21" y="1551.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1141" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.26" y="1151.5" ></text>
</g>
<g >
<title>std::byte* anzu::vm_stack::pop&lt;std::byte*&gt; (94,700,000 samples, 5.23%)</title><rect x="528.0" y="1589" width="61.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="530.99" y="1599.5" >std::b..</text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="917" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="17.89" y="927.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (300,000 samples, 0.02%)</title><rect x="11.2" y="1013" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="14.17" y="1023.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="725" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="17.89" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (400,000 samples, 0.02%)</title><rect x="872.5" y="1541" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="875.51" y="1551.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,600,000 samples, 0.09%)</title><rect x="13.1" y="725" width="1.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.13" y="735.5" ></text>
</g>
<g >
<title>anzu::vm_stack::push (3,800,000 samples, 0.21%)</title><rect x="872.1" y="1557" width="2.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="875.05" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="15.4" y="325" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="18.41" y="335.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (900,000 samples, 0.05%)</title><rect x="935.2" y="1509" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="938.17" y="1519.5" ></text>
</g>
<g >
<title>void anzu::vm_stack::push&lt;unsigned long&gt; (55,600,000 samples, 3.07%)</title><rect x="1118.9" y="1589" width="36.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1121.87" y="1599.5" >voi..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1285" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.87" y="1295.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (6,600,000 samples, 0.36%)</title><rect x="1080.7" y="1557" width="4.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1083.70" y="1567.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (800,000 samples, 0.04%)</title><rect x="15.1" y="581" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="18.15" y="591.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="10.8" y="1125" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.78" y="1135.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (700,000 samples, 0.04%)</title><rect x="11.1" y="1301" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.11" y="1311.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="941.2" y="1493" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="944.17" y="1503.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.5" y="293" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="14.0" y="389" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="17.04" y="399.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_expr (900,000 samples, 0.05%)</title><rect x="11.8" y="693" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="14.76" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (1,400,000 samples, 0.08%)</title><rect x="519.3" y="1573" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="522.32" y="1583.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (1,900,000 samples, 0.10%)</title><rect x="1010.8" y="1461" width="1.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1013.80" y="1471.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="805" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.37" y="815.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (300,000 samples, 0.02%)</title><rect x="12.9" y="757" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.93" y="767.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="15.4" y="149" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="18.41" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;anzu::call_frame, std::allocator&lt;anzu::call_frame&gt; &gt;::end (19,100,000 samples, 1.05%)</title><rect x="848.0" y="1573" width="12.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="851.02" y="1583.5" ></text>
</g>
<g >
<title>anzu::type_name std::__invoke_impl&lt;anzu::type_name, anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="1189.4" y="1317" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.41" y="1327.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.9" y="53" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="16.91" y="63.5" ></text>
</g>
<g >
<title>std::invoke_result&lt;anzu::(anonymous namespace)::push_expr (300,000 samples, 0.02%)</title><rect x="13.1" y="693" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="16.13" y="703.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,200,000 samples, 0.29%)</title><rect x="1122.1" y="1573" width="3.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1125.12" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (5,700,000 samples, 0.31%)</title><rect x="979.1" y="1557" width="3.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="982.08" y="1567.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="15.4" y="389" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="18.41" y="399.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (1,400,000 samples, 0.08%)</title><rect x="14.9" y="997" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="17.89" y="1007.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (8,900,000 samples, 0.49%)</title><rect x="432.6" y="1557" width="5.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="435.56" y="1567.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (2,600,000 samples, 0.14%)</title><rect x="1038.0" y="1477" width="1.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1041.03" y="1487.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_copy_typechecked (1,800,000 samples, 0.10%)</title><rect x="11.8" y="805" width="1.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="14.76" y="815.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::byte*, false&gt;::_M_head (3,900,000 samples, 0.22%)</title><rect x="1007.2" y="1477" width="2.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1010.22" y="1487.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1477" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1192.41" y="1487.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (200,000 samples, 0.01%)</title><rect x="10.8" y="1061" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="13.85" y="1071.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (800,000 samples, 0.04%)</title><rect x="902.7" y="1541" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="905.74" y="1551.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (200,000 samples, 0.01%)</title><rect x="864.1" y="1509" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="867.11" y="1519.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.8" y="885" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="13.85" y="895.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::compile_function (200,000 samples, 0.01%)</title><rect x="1189.9" y="1109" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1192.87" y="1119.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (300,000 samples, 0.02%)</title><rect x="937.0" y="1573" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="940.00" y="1583.5" ></text>
</g>
<g >
<title>std::not_equal_to&lt;char&gt;::operator (200,000 samples, 0.01%)</title><rect x="871.1" y="1573" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="874.14" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (200,000 samples, 0.01%)</title><rect x="13.3" y="389" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.32" y="399.5" ></text>
</g>
<g >
<title>decltype (400,000 samples, 0.02%)</title><rect x="11.8" y="629" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.82" y="639.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_braced_statement_list (600,000 samples, 0.03%)</title><rect x="15.9" y="1141" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="18.86" y="1151.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_expression (200,000 samples, 0.01%)</title><rect x="16.0" y="1109" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="18.99" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;anzu::type_name&gt;  (400,000 samples, 0.02%)</title><rect x="12.4" y="597" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.41" y="607.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (600,000 samples, 0.03%)</title><rect x="11.2" y="1045" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.17" y="1055.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt;::_M_head (200,000 samples, 0.01%)</title><rect x="874.3" y="1461" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="877.27" y="1471.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="13.9" y="101" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="16.91" y="111.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::parse_statement (200,000 samples, 0.01%)</title><rect x="17.0" y="1573" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="19.97" y="1583.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.4" y="1461" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.41" y="1471.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::byte*, std::default_delete&lt;std::byte []&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (300,000 samples, 0.02%)</title><rect x="878.2" y="1493" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="881.18" y="1503.5" ></text>
</g>
<g >
<title>auto anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="693" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.37" y="703.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;anzu::(anonymous namespace)::push_stmt (1,200,000 samples, 0.07%)</title><rect x="14.9" y="741" width="0.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="17.89" y="751.5" ></text>
</g>
<g >
<title>std::byte* const&amp; std::__get_helper&lt;0ul, std::byte*, std::default_delete&lt;std::byte []&gt; &gt; (200,000 samples, 0.01%)</title><rect x="463.2" y="1509" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="466.17" y="1519.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.9" y="1013" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.87" y="1023.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="10.3" y="1573" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.26" y="1583.5" ></text>
</g>
<g >
<title>decltype (300,000 samples, 0.02%)</title><rect x="11.4" y="885" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.37" y="895.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_expr (200,000 samples, 0.01%)</title><rect x="12.7" y="485" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.67" y="495.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (200,000 samples, 0.01%)</title><rect x="1189.5" y="1637" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.54" y="1647.5" ></text>
</g>
<g >
<title>decltype (200,000 samples, 0.01%)</title><rect x="1189.4" y="1221" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.41" y="1231.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::operator[] (2,500,000 samples, 0.14%)</title><rect x="894.4" y="1557" width="1.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="897.40" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (1,300,000 samples, 0.07%)</title><rect x="13.3" y="709" width="0.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.32" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::byte [], std::default_delete&lt;std::byte []&gt; &gt;::get (29,900,000 samples, 1.65%)</title><rect x="438.4" y="1557" width="19.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="441.36" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::load_module (7,800,000 samples, 0.43%)</title><rect x="11.6" y="1221" width="5.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="14.63" y="1231.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::byte, std::default_delete&lt;std::byte []&gt; &gt;::_M_ptr (6,800,000 samples, 0.38%)</title><rect x="489.6" y="1557" width="4.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="492.56" y="1567.5" ></text>
</g>
<g >
<title>anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="917" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.37" y="927.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, anzu::(anonymous namespace)::push_stmt (300,000 samples, 0.02%)</title><rect x="11.4" y="709" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.37" y="719.5" ></text>
</g>
</g>
</svg>
